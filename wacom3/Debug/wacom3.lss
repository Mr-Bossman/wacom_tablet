
wacom3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00804000  00804000  00000510  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000049c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00804000  00804000  00000510  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000510  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000540  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000348  00000000  00000000  00000580  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000774f  00000000  00000000  000008c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003ad7  00000000  00000000  00008017  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000186d  00000000  00000000  0000baee  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000052c  00000000  00000000  0000d35c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000048c9  00000000  00000000  0000d888  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000009bc  00000000  00000000  00012151  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000258  00000000  00000000  00012b0d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__ctors_end>
   4:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
   8:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
   c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  10:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  14:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  18:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  1c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  20:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  24:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  28:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  2c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  30:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  34:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  38:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  3c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  40:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  44:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  48:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  4c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  50:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  54:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  58:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  5c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  60:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  64:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  68:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  6c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  70:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  74:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  78:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  7c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  80:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  84:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  88:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  8c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  90:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  94:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  98:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  9c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  a0:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  a4:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  a8:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  ac:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  b0:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  b4:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  b8:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  bc:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  c0:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  c4:	0c 94 91 00 	jmp	0x122	; 0x122 <__vector_49>
  c8:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  cc:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  d0:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  d4:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  d8:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  dc:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  e0:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  e4:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  e8:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  ec:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  f0:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>

000000f4 <__ctors_end>:
  f4:	11 24       	eor	r1, r1
  f6:	1f be       	out	0x3f, r1	; 63
  f8:	cf ef       	ldi	r28, 0xFF	; 255
  fa:	cd bf       	out	0x3d, r28	; 61
  fc:	df e7       	ldi	r29, 0x7F	; 127
  fe:	de bf       	out	0x3e, r29	; 62

00000100 <__do_clear_bss>:
 100:	20 e4       	ldi	r18, 0x40	; 64
 102:	a0 e0       	ldi	r26, 0x00	; 0
 104:	b0 e4       	ldi	r27, 0x40	; 64
 106:	01 c0       	rjmp	.+2      	; 0x10a <.do_clear_bss_start>

00000108 <.do_clear_bss_loop>:
 108:	1d 92       	st	X+, r1

0000010a <.do_clear_bss_start>:
 10a:	a2 30       	cpi	r26, 0x02	; 2
 10c:	b2 07       	cpc	r27, r18
 10e:	e1 f7       	brne	.-8      	; 0x108 <.do_clear_bss_loop>
 110:	0e 94 fd 00 	call	0x1fa	; 0x1fa <main>
 114:	0c 94 4c 02 	jmp	0x498	; 0x498 <_exit>

00000118 <__bad_interrupt>:
 118:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000011c <atmel_start_init>:
/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
	system_init();
 11c:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <system_init>
 120:	08 95       	ret

00000122 <__vector_49>:
}
inline void sel(uint8_t val){
	VPORTC.OUT = (VPORTC.OUT&0x7) | (val<<3);
}
ISR(TCA1_CMP0_vect)
{
 122:	1f 92       	push	r1
 124:	0f 92       	push	r0
 126:	0f b6       	in	r0, 0x3f	; 63
 128:	0f 92       	push	r0
 12a:	11 24       	eor	r1, r1
 12c:	0b b6       	in	r0, 0x3b	; 59
 12e:	0f 92       	push	r0
 130:	2f 93       	push	r18
 132:	3f 93       	push	r19
 134:	4f 93       	push	r20
 136:	5f 93       	push	r21
 138:	6f 93       	push	r22
 13a:	7f 93       	push	r23
 13c:	8f 93       	push	r24
 13e:	9f 93       	push	r25
 140:	af 93       	push	r26
 142:	bf 93       	push	r27
 144:	ef 93       	push	r30
 146:	ff 93       	push	r31
	if(blank < BLANK)
 148:	80 91 00 40 	lds	r24, 0x4000	; 0x804000 <__DATA_REGION_ORIGIN__>
 14c:	90 91 01 40 	lds	r25, 0x4001	; 0x804001 <__DATA_REGION_ORIGIN__+0x1>
 150:	80 38       	cpi	r24, 0x80	; 128
 152:	91 05       	cpc	r25, r1
 154:	20 f4       	brcc	.+8      	; 0x15e <__vector_49+0x3c>
#include <driver_init.h>
#include <compiler.h>
volatile uint16_t blank = 0;
#define BLANK 128
inline void ind(uint8_t val){
			VPORTC.OUT = (VPORTC.OUT&0xf8) | (val&7);
 156:	89 b1       	in	r24, 0x09	; 9
 158:	88 7f       	andi	r24, 0xF8	; 248
 15a:	81 60       	ori	r24, 0x01	; 1
 15c:	89 b9       	out	0x09, r24	; 9
ISR(TCA1_CMP0_vect)
{
	if(blank < BLANK)
		ind(1);
	/* Insert your TCA Compare 0 Interrupt handling code here */
	if(blank == BLANK){
 15e:	80 91 00 40 	lds	r24, 0x4000	; 0x804000 <__DATA_REGION_ORIGIN__>
 162:	90 91 01 40 	lds	r25, 0x4001	; 0x804001 <__DATA_REGION_ORIGIN__+0x1>
 166:	80 38       	cpi	r24, 0x80	; 128
 168:	91 05       	cpc	r25, r1
 16a:	81 f4       	brne	.+32     	; 0x18c <__vector_49+0x6a>
OPERATIONAL_AMPLIFIER_0_EnableSystem();
 16c:	0e 94 1d 02 	call	0x43a	; 0x43a <OPERATIONAL_AMPLIFIER_0_EnableSystem>
#include <driver_init.h>
#include <compiler.h>
volatile uint16_t blank = 0;
#define BLANK 128
inline void ind(uint8_t val){
			VPORTC.OUT = (VPORTC.OUT&0xf8) | (val&7);
 170:	89 b1       	in	r24, 0x09	; 9
 172:	88 7f       	andi	r24, 0xF8	; 248
 174:	81 60       	ori	r24, 0x01	; 1
 176:	89 b9       	out	0x09, r24	; 9
}
inline void sel(uint8_t val){
	VPORTC.OUT = (VPORTC.OUT&0x7) | (val<<3);
 178:	89 b1       	in	r24, 0x09	; 9
 17a:	87 70       	andi	r24, 0x07	; 7
 17c:	88 67       	ori	r24, 0x78	; 120
 17e:	89 b9       	out	0x09, r24	; 9
 *                  false = Pin level set to "low" state
 */
static inline void PORTE_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTE.OUT |= (1 << pin);
 180:	81 b3       	in	r24, 0x11	; 17
 182:	82 60       	ori	r24, 0x02	; 2
 184:	81 bb       	out	0x11, r24	; 17
 */
static inline void PORTE_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTE.DIR &= ~(1 << pin);
 186:	80 b3       	in	r24, 0x10	; 16
 188:	8e 7f       	andi	r24, 0xFE	; 254
 18a:	80 bb       	out	0x10, r24	; 16
		sel(0xf);
		PE1_set_level(true);
		PE0_set_dir(PORT_DIR_IN);
	}

	if(blank == BLANK*2){
 18c:	80 91 00 40 	lds	r24, 0x4000	; 0x804000 <__DATA_REGION_ORIGIN__>
 190:	90 91 01 40 	lds	r25, 0x4001	; 0x804001 <__DATA_REGION_ORIGIN__+0x1>
 194:	81 15       	cp	r24, r1
 196:	91 40       	sbci	r25, 0x01	; 1
 198:	89 f4       	brne	.+34     	; 0x1bc <__vector_49+0x9a>
OPERATIONAL_AMPLIFIER_0_DisableSystem();
 19a:	0e 94 23 02 	call	0x446	; 0x446 <OPERATIONAL_AMPLIFIER_0_DisableSystem>
static inline void PORTE_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTE.OUT |= (1 << pin);
	} else {
		VPORTE.OUT &= ~(1 << pin);
 19e:	81 b3       	in	r24, 0x11	; 17
 1a0:	8d 7f       	andi	r24, 0xFD	; 253
 1a2:	81 bb       	out	0x11, r24	; 17
	switch (dir) {
	case PORT_DIR_IN:
		VPORTE.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTE.DIR |= (1 << pin);
 1a4:	80 b3       	in	r24, 0x10	; 16
 1a6:	81 60       	ori	r24, 0x01	; 1
 1a8:	80 bb       	out	0x10, r24	; 16
		PE1_set_level(false);
		PE0_set_dir(PORT_DIR_OUT);
		blank = 0;
 1aa:	10 92 00 40 	sts	0x4000, r1	; 0x804000 <__DATA_REGION_ORIGIN__>
 1ae:	10 92 01 40 	sts	0x4001, r1	; 0x804001 <__DATA_REGION_ORIGIN__+0x1>
#define BLANK 128
inline void ind(uint8_t val){
			VPORTC.OUT = (VPORTC.OUT&0xf8) | (val&7);
}
inline void sel(uint8_t val){
	VPORTC.OUT = (VPORTC.OUT&0x7) | (val<<3);
 1b2:	89 b1       	in	r24, 0x09	; 9
 1b4:	87 70       	andi	r24, 0x07	; 7
 1b6:	88 67       	ori	r24, 0x78	; 120
 1b8:	89 b9       	out	0x09, r24	; 9
 1ba:	09 c0       	rjmp	.+18     	; 0x1ce <__vector_49+0xac>
		PE1_set_level(false);
		PE0_set_dir(PORT_DIR_OUT);
		blank = 0;
		sel(0xf);
	}else
		blank++;
 1bc:	80 91 00 40 	lds	r24, 0x4000	; 0x804000 <__DATA_REGION_ORIGIN__>
 1c0:	90 91 01 40 	lds	r25, 0x4001	; 0x804001 <__DATA_REGION_ORIGIN__+0x1>
 1c4:	01 96       	adiw	r24, 0x01	; 1
 1c6:	80 93 00 40 	sts	0x4000, r24	; 0x804000 <__DATA_REGION_ORIGIN__>
 1ca:	90 93 01 40 	sts	0x4001, r25	; 0x804001 <__DATA_REGION_ORIGIN__+0x1>
	/* The interrupt flag has to be cleared manually */
	TCA1.SINGLE.INTFLAGS = TCA_SINGLE_CMP0_bm;
 1ce:	80 e1       	ldi	r24, 0x10	; 16
 1d0:	80 93 4b 0a 	sts	0x0A4B, r24	; 0x800a4b <__TEXT_REGION_LENGTH__+0x7e0a4b>
}
 1d4:	ff 91       	pop	r31
 1d6:	ef 91       	pop	r30
 1d8:	bf 91       	pop	r27
 1da:	af 91       	pop	r26
 1dc:	9f 91       	pop	r25
 1de:	8f 91       	pop	r24
 1e0:	7f 91       	pop	r23
 1e2:	6f 91       	pop	r22
 1e4:	5f 91       	pop	r21
 1e6:	4f 91       	pop	r20
 1e8:	3f 91       	pop	r19
 1ea:	2f 91       	pop	r18
 1ec:	0f 90       	pop	r0
 1ee:	0b be       	out	0x3b, r0	; 59
 1f0:	0f 90       	pop	r0
 1f2:	0f be       	out	0x3f, r0	; 63
 1f4:	0f 90       	pop	r0
 1f6:	1f 90       	pop	r1
 1f8:	18 95       	reti

000001fa <main>:
#include <atmel_start.h>

int main(void)
{
	/* Initializes MCU, drivers and middleware */
	PORTC.DIR = 0xff;
 1fa:	8f ef       	ldi	r24, 0xFF	; 255
 1fc:	80 93 40 04 	sts	0x0440, r24	; 0x800440 <__TEXT_REGION_LENGTH__+0x7e0440>
	VPORTC.DIR = 0xff;
 200:	88 b9       	out	0x08, r24	; 8
	atmel_start_init();
 202:	0e 94 8e 00 	call	0x11c	; 0x11c <atmel_start_init>
 206:	ff cf       	rjmp	.-2      	; 0x206 <__EEPROM_REGION_LENGTH__+0x6>

00000208 <ADC_0_init>:
 * \retval 1 the ADC init was not successful
 */
int8_t ADC_0_init()
{

	ADC0.CTRLB = ADC_SAMPNUM_ACC128_gc; /* 128 results accumulated */
 208:	e0 e0       	ldi	r30, 0x00	; 0
 20a:	f6 e0       	ldi	r31, 0x06	; 6
 20c:	87 e0       	ldi	r24, 0x07	; 7
 20e:	81 83       	std	Z+1, r24	; 0x01
	// ADC0.EVCTRL = 0 << ADC_STARTEI_bp; /* Start Event Input Enable: disabled */

	// ADC0.INTCTRL = 0 << ADC_RESRDY_bp /* Result Ready Interrupt Enable: disabled */
	//		 | 0 << ADC_WCMP_bp; /* Window Comparator Interrupt Enable: disabled */

	ADC0.MUXPOS = ADC_MUXPOS_AIN10_gc; /* ADC input pin 10 */
 210:	8a e0       	ldi	r24, 0x0A	; 10
 212:	80 87       	std	Z+8, r24	; 0x08

	ADC0.MUXNEG = ADC_MUXNEG_AIN6_gc; /* ADC input pin 6 */
 214:	86 e0       	ldi	r24, 0x06	; 6
 216:	81 87       	std	Z+9, r24	; 0x09

	// ADC0.WINHT = 0x0; /* Window Comparator High Threshold: 0x0 */

	// ADC0.WINLT = 0x0; /* Window Comparator Low Threshold: 0x0 */

	ADC0.CTRLA = 1 << ADC_ENABLE_bp      /* ADC Enable: enabled */
 218:	81 ea       	ldi	r24, 0xA1	; 161
 21a:	80 83       	st	Z, r24
	             | 1 << ADC_RUNSTBY_bp   /* Run standby mode: enabled */
	             | 0 << ADC_LEFTADJ_bp   /* Left Adjust Result: disabled */
	             | 1 << ADC_CONVMODE_bp; /* Differential Mode Conversion: enabled */

	return 0;
}
 21c:	80 e0       	ldi	r24, 0x00	; 0
 21e:	08 95       	ret

00000220 <BOD_init>:
int8_t BOD_init()
{

	// ccp_write_io((void*)&(BOD.CTRLA),BOD_SLEEP_DIS_gc /* Disabled */);

	BOD.INTCTRL = 0 << BOD_VLMIE_bp        /* voltage level monitor interrrupt enable: disabled */
 220:	10 92 a9 00 	sts	0x00A9, r1	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
	              | BOD_VLMCFG_FALLING_gc; /* Interrupt when supply goes below VLM level */

	// BOD.VLMCTRLA = BOD_VLMLVL_5ABOVE_gc; /* VLM threshold 5% above BOD level */

	return 0;
}
 224:	80 e0       	ldi	r24, 0x00	; 0
 226:	08 95       	ret

00000228 <CLKCTRL_init>:
 *       on calling convention. The memory model is not visible to the
 *       preprocessor, so it must be defined in the Assembler preprocessor directives.
 */
static inline void ccp_write_io(void *addr, uint8_t value)
{
	protected_write_io(addr, CCP_IOREG_gc, value);
 228:	4d e0       	ldi	r20, 0x0D	; 13
 22a:	68 ed       	ldi	r22, 0xD8	; 216
 22c:	80 e8       	ldi	r24, 0x80	; 128
 22e:	90 e0       	ldi	r25, 0x00	; 0
 230:	0e 94 29 02 	call	0x452	; 0x452 <protected_write_io>
 234:	44 e2       	ldi	r20, 0x24	; 36
 236:	68 ed       	ldi	r22, 0xD8	; 216
 238:	88 e6       	ldi	r24, 0x68	; 104
 23a:	90 e0       	ldi	r25, 0x00	; 0
 23c:	0e 94 29 02 	call	0x452	; 0x452 <protected_write_io>

	// ccp_write_io((void*)&(CLKCTRL.MCLKCTRLA),CLKCTRL_CLKSEL_OSCHF_gc /* Internal high-frequency oscillator */
	//		 | 0 << CLKCTRL_CLKOUT_bp /* System clock out: disabled */);

	return 0;
}
 240:	80 e0       	ldi	r24, 0x00	; 0
 242:	08 95       	ret

00000244 <CPUINT_init>:
 244:	41 e0       	ldi	r20, 0x01	; 1
 246:	68 ed       	ldi	r22, 0xD8	; 216
 248:	80 e1       	ldi	r24, 0x10	; 16
 24a:	91 e0       	ldi	r25, 0x01	; 1
 24c:	0e 94 29 02 	call	0x452	; 0x452 <protected_write_io>

	// CPUINT.LVL0PRI = 0x0 << CPUINT_LVL0PRI_gp; /* Interrupt Level Priority: 0x0 */

	// CPUINT.LVL1VEC = 0x0 << CPUINT_LVL1VEC_gp; /* Interrupt Vector with High Priority: 0x0 */

	ENABLE_INTERRUPTS();
 250:	78 94       	sei

	return 0;
}
 252:	80 e0       	ldi	r24, 0x00	; 0
 254:	08 95       	ret

00000256 <DAC_0_init>:
 * \retval 1 the DAC init was not successful
 */
int8_t DAC_0_init()
{

	DAC0.DATA = 0x3ff << DAC_DATA_gp; /* DATA Register: 0x3ff */
 256:	e0 ea       	ldi	r30, 0xA0	; 160
 258:	f6 e0       	ldi	r31, 0x06	; 6
 25a:	80 ec       	ldi	r24, 0xC0	; 192
 25c:	9f ef       	ldi	r25, 0xFF	; 255
 25e:	82 83       	std	Z+2, r24	; 0x02
 260:	93 83       	std	Z+3, r25	; 0x03

	DAC0.CTRLA = 1 << DAC_ENABLE_bp      /* DAC Enable: enabled */
 262:	81 ec       	ldi	r24, 0xC1	; 193
 264:	80 83       	st	Z, r24
	             | 1 << DAC_OUTEN_bp     /* Output Buffer Enable: enabled */
	             | 1 << DAC_RUNSTDBY_bp; /* Run in Standby Mode: enabled */

	return 0;
}
 266:	80 e0       	ldi	r24, 0x00	; 0
 268:	08 95       	ret

0000026a <mcu_init>:
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	/* Set all pins to low power mode */

	for (uint8_t i = 0; i < 8; i++) {
 26a:	80 e0       	ldi	r24, 0x00	; 0
 26c:	08 c0       	rjmp	.+16     	; 0x27e <mcu_init+0x14>
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
 26e:	e8 2f       	mov	r30, r24
 270:	f0 e0       	ldi	r31, 0x00	; 0
 272:	e0 5f       	subi	r30, 0xF0	; 240
 274:	fb 4f       	sbci	r31, 0xFB	; 251
 276:	90 81       	ld	r25, Z
 278:	98 60       	ori	r25, 0x08	; 8
 27a:	90 83       	st	Z, r25
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	/* Set all pins to low power mode */

	for (uint8_t i = 0; i < 8; i++) {
 27c:	8f 5f       	subi	r24, 0xFF	; 255
 27e:	88 30       	cpi	r24, 0x08	; 8
 280:	b0 f3       	brcs	.-20     	; 0x26e <mcu_init+0x4>
 282:	80 e0       	ldi	r24, 0x00	; 0
 284:	08 c0       	rjmp	.+16     	; 0x296 <mcu_init+0x2c>
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
 286:	e8 2f       	mov	r30, r24
 288:	f0 e0       	ldi	r31, 0x00	; 0
 28a:	e0 5d       	subi	r30, 0xD0	; 208
 28c:	fb 4f       	sbci	r31, 0xFB	; 251
 28e:	90 81       	ld	r25, Z
 290:	98 60       	ori	r25, 0x08	; 8
 292:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 294:	8f 5f       	subi	r24, 0xFF	; 255
 296:	88 30       	cpi	r24, 0x08	; 8
 298:	b0 f3       	brcs	.-20     	; 0x286 <mcu_init+0x1c>
 29a:	80 e0       	ldi	r24, 0x00	; 0
 29c:	08 c0       	rjmp	.+16     	; 0x2ae <mcu_init+0x44>
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
 29e:	e8 2f       	mov	r30, r24
 2a0:	f0 e0       	ldi	r31, 0x00	; 0
 2a2:	e0 5b       	subi	r30, 0xB0	; 176
 2a4:	fb 4f       	sbci	r31, 0xFB	; 251
 2a6:	90 81       	ld	r25, Z
 2a8:	98 60       	ori	r25, 0x08	; 8
 2aa:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 2ac:	8f 5f       	subi	r24, 0xFF	; 255
 2ae:	88 30       	cpi	r24, 0x08	; 8
 2b0:	b0 f3       	brcs	.-20     	; 0x29e <mcu_init+0x34>
 2b2:	80 e0       	ldi	r24, 0x00	; 0
 2b4:	08 c0       	rjmp	.+16     	; 0x2c6 <mcu_init+0x5c>
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTD + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
 2b6:	e8 2f       	mov	r30, r24
 2b8:	f0 e0       	ldi	r31, 0x00	; 0
 2ba:	e0 59       	subi	r30, 0x90	; 144
 2bc:	fb 4f       	sbci	r31, 0xFB	; 251
 2be:	90 81       	ld	r25, Z
 2c0:	98 60       	ori	r25, 0x08	; 8
 2c2:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 2c4:	8f 5f       	subi	r24, 0xFF	; 255
 2c6:	88 30       	cpi	r24, 0x08	; 8
 2c8:	b0 f3       	brcs	.-20     	; 0x2b6 <mcu_init+0x4c>
 2ca:	80 e0       	ldi	r24, 0x00	; 0
 2cc:	08 c0       	rjmp	.+16     	; 0x2de <mcu_init+0x74>
		*((uint8_t *)&PORTD + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTE + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
 2ce:	e8 2f       	mov	r30, r24
 2d0:	f0 e0       	ldi	r31, 0x00	; 0
 2d2:	e0 57       	subi	r30, 0x70	; 112
 2d4:	fb 4f       	sbci	r31, 0xFB	; 251
 2d6:	90 81       	ld	r25, Z
 2d8:	98 60       	ori	r25, 0x08	; 8
 2da:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTD + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 2dc:	8f 5f       	subi	r24, 0xFF	; 255
 2de:	88 30       	cpi	r24, 0x08	; 8
 2e0:	b0 f3       	brcs	.-20     	; 0x2ce <mcu_init+0x64>
 2e2:	80 e0       	ldi	r24, 0x00	; 0
 2e4:	08 c0       	rjmp	.+16     	; 0x2f6 <mcu_init+0x8c>
		*((uint8_t *)&PORTE + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTF + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
 2e6:	e8 2f       	mov	r30, r24
 2e8:	f0 e0       	ldi	r31, 0x00	; 0
 2ea:	e0 55       	subi	r30, 0x50	; 80
 2ec:	fb 4f       	sbci	r31, 0xFB	; 251
 2ee:	90 81       	ld	r25, Z
 2f0:	98 60       	ori	r25, 0x08	; 8
 2f2:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTE + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 2f4:	8f 5f       	subi	r24, 0xFF	; 255
 2f6:	88 30       	cpi	r24, 0x08	; 8
 2f8:	b0 f3       	brcs	.-20     	; 0x2e6 <mcu_init+0x7c>
		*((uint8_t *)&PORTF + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}
}
 2fa:	08 95       	ret

000002fc <OPERATIONAL_AMPLIFIER_0_initialization>:
 */
static inline void PORTD_pin_set_isc(const uint8_t pin, const PORT_ISC_t isc)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTD + 0x10 + pin);

	*port_pin_ctrl = (*port_pin_ctrl & ~PORT_ISC_gm) | isc;
 2fc:	e3 e7       	ldi	r30, 0x73	; 115
 2fe:	f4 e0       	ldi	r31, 0x04	; 4
 300:	80 81       	ld	r24, Z
 302:	88 7f       	andi	r24, 0xF8	; 248
 304:	84 60       	ori	r24, 0x04	; 4
 306:	80 83       	st	Z, r24
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTD + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
 308:	80 81       	ld	r24, Z
 30a:	87 7f       	andi	r24, 0xF7	; 247
 30c:	80 83       	st	Z, r24
 */
static inline void PORTD_pin_set_isc(const uint8_t pin, const PORT_ISC_t isc)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTD + 0x10 + pin);

	*port_pin_ctrl = (*port_pin_ctrl & ~PORT_ISC_gm) | isc;
 30e:	e1 e7       	ldi	r30, 0x71	; 113
 310:	f4 e0       	ldi	r31, 0x04	; 4
 312:	80 81       	ld	r24, Z
 314:	88 7f       	andi	r24, 0xF8	; 248
 316:	84 60       	ori	r24, 0x04	; 4
 318:	80 83       	st	Z, r24
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTD + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
 31a:	80 81       	ld	r24, Z
 31c:	87 7f       	andi	r24, 0xF7	; 247
 31e:	80 83       	st	Z, r24
 */
static inline void PORTD_pin_set_isc(const uint8_t pin, const PORT_ISC_t isc)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTD + 0x10 + pin);

	*port_pin_ctrl = (*port_pin_ctrl & ~PORT_ISC_gm) | isc;
 320:	e2 e7       	ldi	r30, 0x72	; 114
 322:	f4 e0       	ldi	r31, 0x04	; 4
 324:	80 81       	ld	r24, Z
 326:	88 7f       	andi	r24, 0xF8	; 248
 328:	84 60       	ori	r24, 0x04	; 4
 32a:	80 83       	st	Z, r24
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTD + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
 32c:	80 81       	ld	r24, Z
 32e:	87 7f       	andi	r24, 0xF7	; 247
 330:	80 83       	st	Z, r24
 */
static inline void PORTD_pin_set_isc(const uint8_t pin, const PORT_ISC_t isc)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTD + 0x10 + pin);

	*port_pin_ctrl = (*port_pin_ctrl & ~PORT_ISC_gm) | isc;
 332:	e7 e7       	ldi	r30, 0x77	; 119
 334:	f4 e0       	ldi	r31, 0x04	; 4
 336:	80 81       	ld	r24, Z
 338:	88 7f       	andi	r24, 0xF8	; 248
 33a:	84 60       	ori	r24, 0x04	; 4
 33c:	80 83       	st	Z, r24
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTD + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
 33e:	80 81       	ld	r24, Z
 340:	87 7f       	andi	r24, 0xF7	; 247
 342:	80 83       	st	Z, r24
 */
static inline void PORTD_pin_set_isc(const uint8_t pin, const PORT_ISC_t isc)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTD + 0x10 + pin);

	*port_pin_ctrl = (*port_pin_ctrl & ~PORT_ISC_gm) | isc;
 344:	e5 e7       	ldi	r30, 0x75	; 117
 346:	f4 e0       	ldi	r31, 0x04	; 4
 348:	80 81       	ld	r24, Z
 34a:	88 7f       	andi	r24, 0xF8	; 248
 34c:	84 60       	ori	r24, 0x04	; 4
 34e:	80 83       	st	Z, r24
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTD + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
 350:	80 81       	ld	r24, Z
 352:	87 7f       	andi	r24, 0xF7	; 247
 354:	80 83       	st	Z, r24
 */
static inline void PORTE_pin_set_isc(const uint8_t pin, const PORT_ISC_t isc)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTE + 0x10 + pin);

	*port_pin_ctrl = (*port_pin_ctrl & ~PORT_ISC_gm) | isc;
 356:	e3 e9       	ldi	r30, 0x93	; 147
 358:	f4 e0       	ldi	r31, 0x04	; 4
 35a:	80 81       	ld	r24, Z
 35c:	88 7f       	andi	r24, 0xF8	; 248
 35e:	84 60       	ori	r24, 0x04	; 4
 360:	80 83       	st	Z, r24
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTE + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
 362:	80 81       	ld	r24, Z
 364:	87 7f       	andi	r24, 0xF7	; 247
 366:	80 83       	st	Z, r24
 */
static inline void PORTE_pin_set_isc(const uint8_t pin, const PORT_ISC_t isc)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTE + 0x10 + pin);

	*port_pin_ctrl = (*port_pin_ctrl & ~PORT_ISC_gm) | isc;
 368:	e2 e9       	ldi	r30, 0x92	; 146
 36a:	f4 e0       	ldi	r31, 0x04	; 4
 36c:	80 81       	ld	r24, Z
 36e:	88 7f       	andi	r24, 0xF8	; 248
 370:	84 60       	ori	r24, 0x04	; 4
 372:	80 83       	st	Z, r24
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTE + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
 374:	80 81       	ld	r24, Z
 376:	87 7f       	andi	r24, 0xF7	; 247
 378:	80 83       	st	Z, r24
	// Disable digital input buffer
	PE2_set_isc(PORT_ISC_INPUT_DISABLE_gc);
	// Disable pull-up resistor
	PE2_set_pull_mode(PORT_PULL_OFF);

	OPERATIONAL_AMPLIFIER_0_init();
 37a:	0e 94 08 02 	call	0x410	; 0x410 <OPERATIONAL_AMPLIFIER_0_init>
 37e:	08 95       	ret

00000380 <EVENT_SYSTEM_0_initialization>:
}

void EVENT_SYSTEM_0_initialization(void)
{

	EVENT_SYSTEM_0_init();
 380:	0e 94 00 02 	call	0x400	; 0x400 <EVENT_SYSTEM_0_init>
 384:	08 95       	ret

00000386 <DAC_0_initialization>:
 */
static inline void PORTD_pin_set_isc(const uint8_t pin, const PORT_ISC_t isc)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTD + 0x10 + pin);

	*port_pin_ctrl = (*port_pin_ctrl & ~PORT_ISC_gm) | isc;
 386:	e6 e7       	ldi	r30, 0x76	; 118
 388:	f4 e0       	ldi	r31, 0x04	; 4
 38a:	80 81       	ld	r24, Z
 38c:	88 7f       	andi	r24, 0xF8	; 248
 38e:	84 60       	ori	r24, 0x04	; 4
 390:	80 83       	st	Z, r24
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTD + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
 392:	80 81       	ld	r24, Z
 394:	87 7f       	andi	r24, 0xF7	; 247
 396:	80 83       	st	Z, r24
	// Disable digital input buffer
	DACOUT_set_isc(PORT_ISC_INPUT_DISABLE_gc);
	// Disable pull-up resistor
	DACOUT_set_pull_mode(PORT_PULL_OFF);

	DAC_0_init();
 398:	0e 94 2b 01 	call	0x256	; 0x256 <DAC_0_init>
 39c:	08 95       	ret

0000039e <ADC_0_initialization>:

/* Configure pins and initialize registers */
void ADC_0_initialization(void)
{

	ADC_0_init();
 39e:	0e 94 04 01 	call	0x208	; 0x208 <ADC_0_init>
 3a2:	08 95       	ret

000003a4 <TIMER_0_initialization>:
static inline void PORTE_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTE.OUT |= (1 << pin);
	} else {
		VPORTE.OUT &= ~(1 << pin);
 3a4:	81 b3       	in	r24, 0x11	; 17
 3a6:	8e 7f       	andi	r24, 0xFE	; 254
 3a8:	81 bb       	out	0x11, r24	; 17
	switch (dir) {
	case PORT_DIR_IN:
		VPORTE.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTE.DIR |= (1 << pin);
 3aa:	80 b3       	in	r24, 0x10	; 16
 3ac:	81 60       	ori	r24, 0x01	; 1
 3ae:	80 bb       	out	0x10, r24	; 16

	PE0_set_dir(PORT_DIR_OUT);

	/* set the alternate pin mux */

	PORTMUX.TCAROUTEA |= PORTMUX_TCA02_bm;
 3b0:	e0 ee       	ldi	r30, 0xE0	; 224
 3b2:	f5 e0       	ldi	r31, 0x05	; 5
 3b4:	86 81       	ldd	r24, Z+6	; 0x06
 3b6:	84 60       	ori	r24, 0x04	; 4
 3b8:	86 83       	std	Z+6, r24	; 0x06

	TIMER_0_init();
 3ba:	0e 94 30 02 	call	0x460	; 0x460 <TIMER_0_init>
 3be:	08 95       	ret

000003c0 <TIMER_1_initialization>:
}

void TIMER_1_initialization(void)
{

	TIMER_1_init();
 3c0:	0e 94 3e 02 	call	0x47c	; 0x47c <TIMER_1_init>
 3c4:	08 95       	ret

000003c6 <system_init>:
/**
 * \brief System initialization
 */
void system_init()
{
	mcu_init();
 3c6:	0e 94 35 01 	call	0x26a	; 0x26a <mcu_init>
static inline void PORTE_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTE.OUT |= (1 << pin);
	} else {
		VPORTE.OUT &= ~(1 << pin);
 3ca:	81 b3       	in	r24, 0x11	; 17
 3cc:	8d 7f       	andi	r24, 0xFD	; 253
 3ce:	81 bb       	out	0x11, r24	; 17
	switch (dir) {
	case PORT_DIR_IN:
		VPORTE.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTE.DIR |= (1 << pin);
 3d0:	80 b3       	in	r24, 0x10	; 16
 3d2:	82 60       	ori	r24, 0x02	; 2
 3d4:	80 bb       	out	0x10, r24	; 16
	    // <true"> High
	    false);

	PE1_set_dir(PORT_DIR_OUT);

	OPERATIONAL_AMPLIFIER_0_initialization();
 3d6:	0e 94 7e 01 	call	0x2fc	; 0x2fc <OPERATIONAL_AMPLIFIER_0_initialization>

	CLKCTRL_init();
 3da:	0e 94 14 01 	call	0x228	; 0x228 <CLKCTRL_init>

	EVENT_SYSTEM_0_initialization();
 3de:	0e 94 c0 01 	call	0x380	; 0x380 <EVENT_SYSTEM_0_initialization>

	SLPCTRL_init();
 3e2:	0e 94 2e 02 	call	0x45c	; 0x45c <SLPCTRL_init>

	CPUINT_init();
 3e6:	0e 94 22 01 	call	0x244	; 0x244 <CPUINT_init>

	DAC_0_initialization();
 3ea:	0e 94 c3 01 	call	0x386	; 0x386 <DAC_0_initialization>

	ADC_0_initialization();
 3ee:	0e 94 cf 01 	call	0x39e	; 0x39e <ADC_0_initialization>

	TIMER_0_initialization();
 3f2:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <TIMER_0_initialization>

	TIMER_1_initialization();
 3f6:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <TIMER_1_initialization>

	BOD_init();
 3fa:	0e 94 10 01 	call	0x220	; 0x220 <BOD_init>
 3fe:	08 95       	ret

00000400 <EVENT_SYSTEM_0_init>:
 * \return Initialization status.
 */
int8_t EVENT_SYSTEM_0_init()
{

	EVSYS.CHANNEL0 = EVSYS_CHANNEL0_PORTB_PIN2_gc; /* Port B Pin 2 */
 400:	8a e4       	ldi	r24, 0x4A	; 74
 402:	80 93 10 02 	sts	0x0210, r24	; 0x800210 <__TEXT_REGION_LENGTH__+0x7e0210>

	// EVSYS.USEROPAMP2ENABLE = EVSYS_USER_OFF_gc; /* Off */

	// EVSYS.USEROPAMP2DRIVE = EVSYS_USER_OFF_gc; /* Off */

	EVSYS.USEROPAMP2DUMP = EVSYS_USER_CHANNEL0_gc; /* Connect user to event channel 0 */
 406:	81 e0       	ldi	r24, 0x01	; 1
 408:	80 93 54 02 	sts	0x0254, r24	; 0x800254 <__TEXT_REGION_LENGTH__+0x7e0254>

	// EVSYS.USEROPAMP2DISABLE = EVSYS_USER_OFF_gc; /* Off */

	return 0;
}
 40c:	80 e0       	ldi	r24, 0x00	; 0
 40e:	08 95       	ret

00000410 <OPERATIONAL_AMPLIFIER_0_init>:
 * \return Initialization status.
 */
int8_t OPERATIONAL_AMPLIFIER_0_init()
{

	OPAMP.CTRLA = 1 << OPAMP_ENABLE_bp; /* OPAMP Peripheral Enable: enabled */
 410:	e0 e0       	ldi	r30, 0x00	; 0
 412:	f7 e0       	ldi	r31, 0x07	; 7
 414:	81 e0       	ldi	r24, 0x01	; 1
 416:	80 83       	st	Z, r24

	// OPAMP.DBGCTRL = 0 << OPAMP_DBGRUN_bp; /* Run in Debug mode: disabled */

	OPAMP.TIMEBASE = OPAMP_TIMEBASE_VALUE << OPAMP_TIMEBASE_gp;
 418:	97 e1       	ldi	r25, 0x17	; 23
 41a:	92 83       	std	Z+2, r25	; 0x02

	// OPAMP.PWRCTRL = OPAMP_PWRCTRL_IRSEL_FULL_gc; /* Full Input Range */

	OPAMP.OP0SETTLE = 0x1 << OPAMP_SETTLE_gp; /* Setting: 0x1 */
 41c:	84 8b       	std	Z+20, r24	; 0x14

	OPAMP.OP0CTRLA = 1 << OPAMP_ALWAYSON_bp             /* Always ON: enabled */
 41e:	95 e0       	ldi	r25, 0x05	; 5
 420:	90 8b       	std	Z+16, r25	; 0x10
	                 | 0 << OPAMP_EVENTEN_bp            /* Event Enable: disabled */
	                 | OPAMP_OP0CTRLA_OUTMODE_NORMAL_gc /* Output Driver in Normal Mode */
	                 | 0 << OPAMP_RUNSTBY_bp;           /* Run is standby mode: disabled */

	OPAMP.OP0RESMUX = OPAMP_OP0RESMUX_MUXTOP_OUT_gc     /* OPn output */
 422:	99 ee       	ldi	r25, 0xE9	; 233
 424:	92 8b       	std	Z+18, r25	; 0x12
	                  | OPAMP_OP0RESMUX_MUXBOT_INN_gc   /* Negative input pin for OPn */
	                  | OPAMP_OP0RESMUX_MUXWIP_WIP7_gc; /* R1 = 1R, R2 = 15R, R2/R1 = 15 */

	OPAMP.OP0INMUX = OPAMP_OP0INMUX_MUXPOS_INP_gc /* VDD/2 */
 426:	90 e1       	ldi	r25, 0x10	; 16
 428:	93 8b       	std	Z+19, r25	; 0x13
	                 | OPAMP_OP0INMUX_MUXNEG_WIP_gc;  /* Wiper from OPn's resistor ladder */

	OPAMP.OP1SETTLE = 0x1 << OPAMP_SETTLE_gp; /* Setting: 0x1 */
 42a:	84 8f       	std	Z+28, r24	; 0x1c

	// OPAMP.OP1RESMUX = OPAMP_OP1RESMUX_MUXTOP_OFF_gc /* Multiplexer off */
	//		 | OPAMP_OP1RESMUX_MUXBOT_OFF_gc /* Multiplexer off */
	//		 | OPAMP_OP1RESMUX_MUXWIP_WIP0_gc; /* R1 = 15R, R2 = 1R, R2/R1 = 0.07 */

	OPAMP.OP1INMUX = OPAMP_OP1INMUX_MUXPOS_VDDDIV2_gc /* VDD/2 */
 42c:	94 e0       	ldi	r25, 0x04	; 4
 42e:	93 8f       	std	Z+27, r25	; 0x1b
	                 | OPAMP_OP1INMUX_MUXNEG_INN_gc;  /* Negative input pin for OPn */

	OPAMP.OP2SETTLE = 0x1 << OPAMP_SETTLE_gp; /* Setting: 0x1 */
 430:	84 a3       	std	Z+36, r24	; 0x24

	OPAMP.OP2CTRLA = 1 << OPAMP_ALWAYSON_bp          /* Always ON: enabled */
 432:	83 e0       	ldi	r24, 0x03	; 3
 434:	80 a3       	std	Z+32, r24	; 0x20

	// OPAMP.OP2INMUX = OPAMP_OP2INMUX_MUXPOS_INP_gc /* Positive input pin for OPn */
	//		 | OPAMP_OP2INMUX_MUXNEG_INN_gc; /* Negative input pin for OPn */

	return 0;
}
 436:	80 e0       	ldi	r24, 0x00	; 0
 438:	08 95       	ret

0000043a <OPERATIONAL_AMPLIFIER_0_EnableSystem>:

void OPERATIONAL_AMPLIFIER_0_EnableSystem()
{
	OPAMP.CTRLA |= OPAMP_ENABLE_bm;
 43a:	e0 e0       	ldi	r30, 0x00	; 0
 43c:	f7 e0       	ldi	r31, 0x07	; 7
 43e:	80 81       	ld	r24, Z
 440:	81 60       	ori	r24, 0x01	; 1
 442:	80 83       	st	Z, r24
 444:	08 95       	ret

00000446 <OPERATIONAL_AMPLIFIER_0_DisableSystem>:
}

void OPERATIONAL_AMPLIFIER_0_DisableSystem()
{
	OPAMP.CTRLA &= ~OPAMP_ENABLE_bm;
 446:	e0 e0       	ldi	r30, 0x00	; 0
 448:	f7 e0       	ldi	r31, 0x07	; 7
 44a:	80 81       	ld	r24, Z
 44c:	8e 7f       	andi	r24, 0xFE	; 254
 44e:	80 83       	st	Z, r24
 450:	08 95       	ret

00000452 <protected_write_io>:
	PUBLIC_FUNCTION(protected_write_io)

#if defined(__GNUC__)
  
#ifdef RAMPZ
	out     _SFR_IO_ADDR(RAMPZ), r1         // Clear bits 23:16 of Z
 452:	1b be       	out	0x3b, r1	; 59
#endif
	movw    r30, r24                // Load addr into Z
 454:	fc 01       	movw	r30, r24
	out     CCP, r22                // Start CCP handshake
 456:	64 bf       	out	0x34, r22	; 52
	st      Z, r20                  // Write value to I/O register
 458:	40 83       	st	Z, r20
	ret                             // Return to caller
 45a:	08 95       	ret

0000045c <SLPCTRL_init>:

	// SLPCTRL.CTRLA = 0 << SLPCTRL_SEN_bp /* Sleep enable: disabled */
	//		 | SLPCTRL_SMODE_IDLE_gc; /* Idle mode */

	return 0;
}
 45c:	80 e0       	ldi	r24, 0x00	; 0
 45e:	08 95       	ret

00000460 <TIMER_0_init>:
 * \return Initialization status.
 */
int8_t TIMER_0_init()
{

	TCA0.SINGLE.CMP0 = 0x78; /* Compare Register 0: 0x78 */
 460:	e0 e0       	ldi	r30, 0x00	; 0
 462:	fa e0       	ldi	r31, 0x0A	; 10
 464:	88 e7       	ldi	r24, 0x78	; 120
 466:	90 e0       	ldi	r25, 0x00	; 0
 468:	80 a7       	std	Z+40, r24	; 0x28
 46a:	91 a7       	std	Z+41, r25	; 0x29

	// TCA0.SINGLE.CMP2 = 0x0; /* Compare Register 2: 0x0 */

	// TCA0.SINGLE.CNT = 0x0; /* Count: 0x0 */

	TCA0.SINGLE.CTRLB = 1 << TCA_SINGLE_ALUPD_bp    /* Auto Lock Update: enabled */
 46c:	89 e1       	ldi	r24, 0x19	; 25
 46e:	81 83       	std	Z+1, r24	; 0x01
	                    | 1 << TCA_SINGLE_CMP0EN_bp /* Compare 0 Enable: enabled */
	                    | 0 << TCA_SINGLE_CMP1EN_bp /* Compare 1 Enable: disabled */
	                    | 0 << TCA_SINGLE_CMP2EN_bp /* Compare 2 Enable: disabled */
	                    | TCA_SINGLE_WGMODE_FRQ_gc; /*  */

	TCA0.SINGLE.CTRLC = 1 << TCA_SINGLE_CMP0OV_bp    /* Compare 0 Waveform Output Value: enabled */
 470:	81 e0       	ldi	r24, 0x01	; 1
 472:	82 83       	std	Z+2, r24	; 0x02
	//		 | 0 << TCA_SINGLE_CMP2_bp /* Compare 2 Interrupt: disabled */
	//		 | 0 << TCA_SINGLE_OVF_bp; /* Overflow Interrupt: disabled */

	// TCA0.SINGLE.PER = 0xffff; /* Period: 0xffff */

	TCA0.SINGLE.CTRLA = TCA_SINGLE_CLKSEL_DIV1_gc      /* System Clock */
 474:	81 e8       	ldi	r24, 0x81	; 129
 476:	80 83       	st	Z, r24
	                    | 1 << TCA_SINGLE_ENABLE_bp    /* Module Enable: enabled */
	                    | 1 << TCA_SINGLE_RUNSTDBY_bp; /* RUN STANDBY: enabled */

	return 0;
}
 478:	80 e0       	ldi	r24, 0x00	; 0
 47a:	08 95       	ret

0000047c <TIMER_1_init>:
 * \return Initialization status.
 */
int8_t TIMER_1_init()
{

	TCA1.SINGLE.CMP0 = 0x78; /* Compare Register 0: 0x78 */
 47c:	e0 e4       	ldi	r30, 0x40	; 64
 47e:	fa e0       	ldi	r31, 0x0A	; 10
 480:	88 e7       	ldi	r24, 0x78	; 120
 482:	90 e0       	ldi	r25, 0x00	; 0
 484:	80 a7       	std	Z+40, r24	; 0x28
 486:	91 a7       	std	Z+41, r25	; 0x29

	// TCA1.SINGLE.CMP2 = 0x0; /* Compare Register 2: 0x0 */

	// TCA1.SINGLE.CNT = 0x0; /* Count: 0x0 */

	TCA1.SINGLE.CTRLB = 0 << TCA_SINGLE_ALUPD_bp    /* Auto Lock Update: disabled */
 488:	81 e1       	ldi	r24, 0x11	; 17
 48a:	81 83       	std	Z+1, r24	; 0x01
	//		 | 0 << TCA_SINGLE_CNTBEI_bp /* Count on Event Input B: disabled */
	//		 | TCA_SINGLE_EVACTA_CNT_POSEDGE_gc /* Count on positive edge event */
	//		 | TCA_SINGLE_EVACTB_UPDOWN_gc; /* Count on prescaled clock. Event controls count direction. Up-count when
	//event line is 0, down-count when event line is 1. */

	TCA1.SINGLE.INTCTRL = 1 << TCA_SINGLE_CMP0_bp   /* Compare 0 Interrupt: enabled */
 48c:	80 e1       	ldi	r24, 0x10	; 16
 48e:	82 87       	std	Z+10, r24	; 0x0a
	                      | 0 << TCA_SINGLE_CMP2_bp /* Compare 2 Interrupt: disabled */
	                      | 0 << TCA_SINGLE_OVF_bp; /* Overflow Interrupt: disabled */

	// TCA1.SINGLE.PER = 0xffff; /* Period: 0xffff */

	TCA1.SINGLE.CTRLA = TCA_SINGLE_CLKSEL_DIV1_gc      /* System Clock */
 490:	81 e0       	ldi	r24, 0x01	; 1
 492:	80 83       	st	Z, r24
	                    | 1 << TCA_SINGLE_ENABLE_bp    /* Module Enable: enabled */
	                    | 0 << TCA_SINGLE_RUNSTDBY_bp; /* RUN STANDBY: disabled */

	return 0;
}
 494:	80 e0       	ldi	r24, 0x00	; 0
 496:	08 95       	ret

00000498 <_exit>:
 498:	f8 94       	cli

0000049a <__stop_program>:
 49a:	ff cf       	rjmp	.-2      	; 0x49a <__stop_program>
