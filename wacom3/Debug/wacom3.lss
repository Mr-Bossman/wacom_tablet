
wacom3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00804000  00804000  00000536  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004c2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00804000  00804000  00000536  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000536  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000568  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000348  00000000  00000000  000005a8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000778c  00000000  00000000  000008f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003af5  00000000  00000000  0000807c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000190d  00000000  00000000  0000bb71  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000052c  00000000  00000000  0000d480  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000048eb  00000000  00000000  0000d9ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a74  00000000  00000000  00012297  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000258  00000000  00000000  00012d0b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__ctors_end>
   4:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
   8:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
   c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  10:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  14:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  18:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  1c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  20:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  24:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  28:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  2c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  30:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  34:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  38:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  3c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  40:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  44:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  48:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  4c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  50:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  54:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  58:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  5c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  60:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  64:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  68:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  6c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  70:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  74:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  78:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  7c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  80:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  84:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  88:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  8c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  90:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  94:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  98:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  9c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  a0:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  a4:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  a8:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  ac:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  b0:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  b4:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  b8:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  bc:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  c0:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  c4:	0c 94 91 00 	jmp	0x122	; 0x122 <__vector_49>
  c8:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  cc:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  d0:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  d4:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  d8:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  dc:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  e0:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  e4:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  e8:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  ec:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  f0:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>

000000f4 <__ctors_end>:
  f4:	11 24       	eor	r1, r1
  f6:	1f be       	out	0x3f, r1	; 63
  f8:	cf ef       	ldi	r28, 0xFF	; 255
  fa:	cd bf       	out	0x3d, r28	; 61
  fc:	df e7       	ldi	r29, 0x7F	; 127
  fe:	de bf       	out	0x3e, r29	; 62

00000100 <__do_clear_bss>:
 100:	20 e4       	ldi	r18, 0x40	; 64
 102:	a0 e0       	ldi	r26, 0x00	; 0
 104:	b0 e4       	ldi	r27, 0x40	; 64
 106:	01 c0       	rjmp	.+2      	; 0x10a <.do_clear_bss_start>

00000108 <.do_clear_bss_loop>:
 108:	1d 92       	st	X+, r1

0000010a <.do_clear_bss_start>:
 10a:	a2 30       	cpi	r26, 0x02	; 2
 10c:	b2 07       	cpc	r27, r18
 10e:	e1 f7       	brne	.-8      	; 0x108 <.do_clear_bss_loop>
 110:	0e 94 00 01 	call	0x200	; 0x200 <main>
 114:	0c 94 5f 02 	jmp	0x4be	; 0x4be <_exit>

00000118 <__bad_interrupt>:
 118:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000011c <atmel_start_init>:
/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
	system_init();
 11c:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <system_init>
 120:	08 95       	ret

00000122 <__vector_49>:
}
inline void sel(uint8_t val){
	VPORTC.OUT = (VPORTC.OUT&0x7) | (val<<3);
}
ISR(TCA1_CMP0_vect)
{
 122:	1f 92       	push	r1
 124:	0f 92       	push	r0
 126:	0f b6       	in	r0, 0x3f	; 63
 128:	0f 92       	push	r0
 12a:	11 24       	eor	r1, r1
 12c:	0b b6       	in	r0, 0x3b	; 59
 12e:	0f 92       	push	r0
 130:	2f 93       	push	r18
 132:	3f 93       	push	r19
 134:	4f 93       	push	r20
 136:	5f 93       	push	r21
 138:	6f 93       	push	r22
 13a:	7f 93       	push	r23
 13c:	8f 93       	push	r24
 13e:	9f 93       	push	r25
 140:	af 93       	push	r26
 142:	bf 93       	push	r27
 144:	ef 93       	push	r30
 146:	ff 93       	push	r31
	if(blank < BLANK)
 148:	80 91 00 40 	lds	r24, 0x4000	; 0x804000 <__DATA_REGION_ORIGIN__>
 14c:	90 91 01 40 	lds	r25, 0x4001	; 0x804001 <__DATA_REGION_ORIGIN__+0x1>
 150:	80 38       	cpi	r24, 0x80	; 128
 152:	91 05       	cpc	r25, r1
 154:	20 f4       	brcc	.+8      	; 0x15e <__vector_49+0x3c>
#include <util/delay.h>

volatile uint16_t blank = 0;
#define BLANK 128
inline void ind(uint8_t val){
			VPORTC.OUT = (VPORTC.OUT&0xf8) | (val&7);
 156:	89 b1       	in	r24, 0x09	; 9
 158:	88 7f       	andi	r24, 0xF8	; 248
 15a:	81 60       	ori	r24, 0x01	; 1
 15c:	89 b9       	out	0x09, r24	; 9
ISR(TCA1_CMP0_vect)
{
	if(blank < BLANK)
		ind(1);
	/* Insert your TCA Compare 0 Interrupt handling code here */
	if(blank == BLANK){
 15e:	80 91 00 40 	lds	r24, 0x4000	; 0x804000 <__DATA_REGION_ORIGIN__>
 162:	90 91 01 40 	lds	r25, 0x4001	; 0x804001 <__DATA_REGION_ORIGIN__+0x1>
 166:	80 38       	cpi	r24, 0x80	; 128
 168:	91 05       	cpc	r25, r1
 16a:	99 f4       	brne	.+38     	; 0x192 <__vector_49+0x70>
#include <util/delay.h>

volatile uint16_t blank = 0;
#define BLANK 128
inline void ind(uint8_t val){
			VPORTC.OUT = (VPORTC.OUT&0xf8) | (val&7);
 16c:	89 b1       	in	r24, 0x09	; 9
 16e:	88 7f       	andi	r24, 0xF8	; 248
 170:	81 60       	ori	r24, 0x01	; 1
 172:	89 b9       	out	0x09, r24	; 9
}
inline void sel(uint8_t val){
	VPORTC.OUT = (VPORTC.OUT&0x7) | (val<<3);
 174:	89 b1       	in	r24, 0x09	; 9
 176:	87 70       	andi	r24, 0x07	; 7
 178:	88 67       	ori	r24, 0x78	; 120
 17a:	89 b9       	out	0x09, r24	; 9
 *                  false = Pin level set to "low" state
 */
static inline void PORTF_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTF.OUT |= (1 << pin);
 17c:	85 b3       	in	r24, 0x15	; 21
 17e:	80 62       	ori	r24, 0x20	; 32
 180:	85 bb       	out	0x15, r24	; 21
 */
static inline void PORTE_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTE.DIR &= ~(1 << pin);
 182:	80 b3       	in	r24, 0x10	; 16
 184:	8e 7f       	andi	r24, 0xFE	; 254
 186:	80 bb       	out	0x10, r24	; 16
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 188:	85 e0       	ldi	r24, 0x05	; 5
 18a:	8a 95       	dec	r24
 18c:	f1 f7       	brne	.-4      	; 0x18a <__vector_49+0x68>
		ind(1);
		sel(0xf);
	PORTF_set_pin_level(5, true);
		PE0_set_dir(PORT_DIR_IN);
		_delay_loop_1(5);
		OPERATIONAL_AMPLIFIER_0_EnableSystem();
 18e:	0e 94 30 02 	call	0x460	; 0x460 <OPERATIONAL_AMPLIFIER_0_EnableSystem>
	}

	if(blank == BLANK*2){
 192:	80 91 00 40 	lds	r24, 0x4000	; 0x804000 <__DATA_REGION_ORIGIN__>
 196:	90 91 01 40 	lds	r25, 0x4001	; 0x804001 <__DATA_REGION_ORIGIN__+0x1>
 19a:	81 15       	cp	r24, r1
 19c:	91 40       	sbci	r25, 0x01	; 1
 19e:	89 f4       	brne	.+34     	; 0x1c2 <__vector_49+0xa0>
		OPERATIONAL_AMPLIFIER_0_DisableSystem();
 1a0:	0e 94 36 02 	call	0x46c	; 0x46c <OPERATIONAL_AMPLIFIER_0_DisableSystem>
static inline void PORTF_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTF.OUT |= (1 << pin);
	} else {
		VPORTF.OUT &= ~(1 << pin);
 1a4:	85 b3       	in	r24, 0x15	; 21
 1a6:	8f 7d       	andi	r24, 0xDF	; 223
 1a8:	85 bb       	out	0x15, r24	; 21
	switch (dir) {
	case PORT_DIR_IN:
		VPORTE.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTE.DIR |= (1 << pin);
 1aa:	80 b3       	in	r24, 0x10	; 16
 1ac:	81 60       	ori	r24, 0x01	; 1
 1ae:	80 bb       	out	0x10, r24	; 16
	PORTF_set_pin_level(5, false);
		PE0_set_dir(PORT_DIR_OUT);
		blank = 0;
 1b0:	10 92 00 40 	sts	0x4000, r1	; 0x804000 <__DATA_REGION_ORIGIN__>
 1b4:	10 92 01 40 	sts	0x4001, r1	; 0x804001 <__DATA_REGION_ORIGIN__+0x1>
#define BLANK 128
inline void ind(uint8_t val){
			VPORTC.OUT = (VPORTC.OUT&0xf8) | (val&7);
}
inline void sel(uint8_t val){
	VPORTC.OUT = (VPORTC.OUT&0x7) | (val<<3);
 1b8:	89 b1       	in	r24, 0x09	; 9
 1ba:	87 70       	andi	r24, 0x07	; 7
 1bc:	88 67       	ori	r24, 0x78	; 120
 1be:	89 b9       	out	0x09, r24	; 9
 1c0:	09 c0       	rjmp	.+18     	; 0x1d4 <__vector_49+0xb2>
	PORTF_set_pin_level(5, false);
		PE0_set_dir(PORT_DIR_OUT);
		blank = 0;
		sel(0xf);
	}else
		blank++;
 1c2:	80 91 00 40 	lds	r24, 0x4000	; 0x804000 <__DATA_REGION_ORIGIN__>
 1c6:	90 91 01 40 	lds	r25, 0x4001	; 0x804001 <__DATA_REGION_ORIGIN__+0x1>
 1ca:	01 96       	adiw	r24, 0x01	; 1
 1cc:	80 93 00 40 	sts	0x4000, r24	; 0x804000 <__DATA_REGION_ORIGIN__>
 1d0:	90 93 01 40 	sts	0x4001, r25	; 0x804001 <__DATA_REGION_ORIGIN__+0x1>
	/* The interrupt flag has to be cleared manually */
	TCA1.SINGLE.INTFLAGS = TCA_SINGLE_CMP0_bm;
 1d4:	80 e1       	ldi	r24, 0x10	; 16
 1d6:	80 93 4b 0a 	sts	0x0A4B, r24	; 0x800a4b <__TEXT_REGION_LENGTH__+0x7e0a4b>
}
 1da:	ff 91       	pop	r31
 1dc:	ef 91       	pop	r30
 1de:	bf 91       	pop	r27
 1e0:	af 91       	pop	r26
 1e2:	9f 91       	pop	r25
 1e4:	8f 91       	pop	r24
 1e6:	7f 91       	pop	r23
 1e8:	6f 91       	pop	r22
 1ea:	5f 91       	pop	r21
 1ec:	4f 91       	pop	r20
 1ee:	3f 91       	pop	r19
 1f0:	2f 91       	pop	r18
 1f2:	0f 90       	pop	r0
 1f4:	0b be       	out	0x3b, r0	; 59
 1f6:	0f 90       	pop	r0
 1f8:	0f be       	out	0x3f, r0	; 63
 1fa:	0f 90       	pop	r0
 1fc:	1f 90       	pop	r1
 1fe:	18 95       	reti

00000200 <main>:
#include <atmel_start.h>

int main(void)
{
	/* Initializes MCU, drivers and middleware */
	PORTC.DIR = 0xff;
 200:	8f ef       	ldi	r24, 0xFF	; 255
 202:	80 93 40 04 	sts	0x0440, r24	; 0x800440 <__TEXT_REGION_LENGTH__+0x7e0440>
	VPORTC.DIR = 0xff;
 206:	88 b9       	out	0x08, r24	; 8
	atmel_start_init();
 208:	0e 94 8e 00 	call	0x11c	; 0x11c <atmel_start_init>
 20c:	ff cf       	rjmp	.-2      	; 0x20c <main+0xc>

0000020e <ADC_0_init>:
 * \retval 1 the ADC init was not successful
 */
int8_t ADC_0_init()
{

	ADC0.CTRLB = ADC_SAMPNUM_ACC128_gc; /* 128 results accumulated */
 20e:	e0 e0       	ldi	r30, 0x00	; 0
 210:	f6 e0       	ldi	r31, 0x06	; 6
 212:	87 e0       	ldi	r24, 0x07	; 7
 214:	81 83       	std	Z+1, r24	; 0x01
	// ADC0.EVCTRL = 0 << ADC_STARTEI_bp; /* Start Event Input Enable: disabled */

	// ADC0.INTCTRL = 0 << ADC_RESRDY_bp /* Result Ready Interrupt Enable: disabled */
	//		 | 0 << ADC_WCMP_bp; /* Window Comparator Interrupt Enable: disabled */

	ADC0.MUXPOS = ADC_MUXPOS_AIN10_gc; /* ADC input pin 10 */
 216:	8a e0       	ldi	r24, 0x0A	; 10
 218:	80 87       	std	Z+8, r24	; 0x08

	ADC0.MUXNEG = ADC_MUXNEG_AIN6_gc; /* ADC input pin 6 */
 21a:	86 e0       	ldi	r24, 0x06	; 6
 21c:	81 87       	std	Z+9, r24	; 0x09

	// ADC0.WINHT = 0x0; /* Window Comparator High Threshold: 0x0 */

	// ADC0.WINLT = 0x0; /* Window Comparator Low Threshold: 0x0 */

	ADC0.CTRLA = 1 << ADC_ENABLE_bp      /* ADC Enable: enabled */
 21e:	81 ea       	ldi	r24, 0xA1	; 161
 220:	80 83       	st	Z, r24
	             | 1 << ADC_RUNSTBY_bp   /* Run standby mode: enabled */
	             | 0 << ADC_LEFTADJ_bp   /* Left Adjust Result: disabled */
	             | 1 << ADC_CONVMODE_bp; /* Differential Mode Conversion: enabled */

	return 0;
}
 222:	80 e0       	ldi	r24, 0x00	; 0
 224:	08 95       	ret

00000226 <BOD_init>:
int8_t BOD_init()
{

	// ccp_write_io((void*)&(BOD.CTRLA),BOD_SLEEP_DIS_gc /* Disabled */);

	BOD.INTCTRL = 0 << BOD_VLMIE_bp        /* voltage level monitor interrrupt enable: disabled */
 226:	10 92 a9 00 	sts	0x00A9, r1	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
	              | BOD_VLMCFG_FALLING_gc; /* Interrupt when supply goes below VLM level */

	// BOD.VLMCTRLA = BOD_VLMLVL_5ABOVE_gc; /* VLM threshold 5% above BOD level */

	return 0;
}
 22a:	80 e0       	ldi	r24, 0x00	; 0
 22c:	08 95       	ret

0000022e <CLKCTRL_init>:
 *       on calling convention. The memory model is not visible to the
 *       preprocessor, so it must be defined in the Assembler preprocessor directives.
 */
static inline void ccp_write_io(void *addr, uint8_t value)
{
	protected_write_io(addr, CCP_IOREG_gc, value);
 22e:	4d e0       	ldi	r20, 0x0D	; 13
 230:	68 ed       	ldi	r22, 0xD8	; 216
 232:	80 e8       	ldi	r24, 0x80	; 128
 234:	90 e0       	ldi	r25, 0x00	; 0
 236:	0e 94 3c 02 	call	0x478	; 0x478 <protected_write_io>
 23a:	44 e2       	ldi	r20, 0x24	; 36
 23c:	68 ed       	ldi	r22, 0xD8	; 216
 23e:	88 e6       	ldi	r24, 0x68	; 104
 240:	90 e0       	ldi	r25, 0x00	; 0
 242:	0e 94 3c 02 	call	0x478	; 0x478 <protected_write_io>

	// ccp_write_io((void*)&(CLKCTRL.MCLKCTRLA),CLKCTRL_CLKSEL_OSCHF_gc /* Internal high-frequency oscillator */
	//		 | 0 << CLKCTRL_CLKOUT_bp /* System clock out: disabled */);

	return 0;
}
 246:	80 e0       	ldi	r24, 0x00	; 0
 248:	08 95       	ret

0000024a <CPUINT_init>:
 24a:	41 e0       	ldi	r20, 0x01	; 1
 24c:	68 ed       	ldi	r22, 0xD8	; 216
 24e:	80 e1       	ldi	r24, 0x10	; 16
 250:	91 e0       	ldi	r25, 0x01	; 1
 252:	0e 94 3c 02 	call	0x478	; 0x478 <protected_write_io>

	// CPUINT.LVL0PRI = 0x0 << CPUINT_LVL0PRI_gp; /* Interrupt Level Priority: 0x0 */

	// CPUINT.LVL1VEC = 0x0 << CPUINT_LVL1VEC_gp; /* Interrupt Vector with High Priority: 0x0 */

	ENABLE_INTERRUPTS();
 256:	78 94       	sei

	return 0;
}
 258:	80 e0       	ldi	r24, 0x00	; 0
 25a:	08 95       	ret

0000025c <DAC_0_init>:
 * \retval 1 the DAC init was not successful
 */
int8_t DAC_0_init()
{

	VREF_DAC0REF = 5;
 25c:	85 e0       	ldi	r24, 0x05	; 5
 25e:	80 93 b2 00 	sts	0x00B2, r24	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>
	DAC0.DATA = 0x20a << DAC_DATA_gp; /* DATA Register: 0x3ff */
 262:	e0 ea       	ldi	r30, 0xA0	; 160
 264:	f6 e0       	ldi	r31, 0x06	; 6
 266:	80 e8       	ldi	r24, 0x80	; 128
 268:	92 e8       	ldi	r25, 0x82	; 130
 26a:	82 83       	std	Z+2, r24	; 0x02
 26c:	93 83       	std	Z+3, r25	; 0x03
	DAC0.CTRLA = 1 << DAC_ENABLE_bp      /* DAC Enable: enabled */
 26e:	81 ec       	ldi	r24, 0xC1	; 193
 270:	80 83       	st	Z, r24
	             | 1 << DAC_OUTEN_bp     /* Output Buffer Enable: enabled */
	             | 1 << DAC_RUNSTDBY_bp; /* Run in Standby Mode: enabled */

	return 0;
}
 272:	80 e0       	ldi	r24, 0x00	; 0
 274:	08 95       	ret

00000276 <mcu_init>:
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	/* Set all pins to low power mode */

	for (uint8_t i = 0; i < 8; i++) {
 276:	80 e0       	ldi	r24, 0x00	; 0
 278:	08 c0       	rjmp	.+16     	; 0x28a <mcu_init+0x14>
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
 27a:	e8 2f       	mov	r30, r24
 27c:	f0 e0       	ldi	r31, 0x00	; 0
 27e:	e0 5f       	subi	r30, 0xF0	; 240
 280:	fb 4f       	sbci	r31, 0xFB	; 251
 282:	90 81       	ld	r25, Z
 284:	98 60       	ori	r25, 0x08	; 8
 286:	90 83       	st	Z, r25
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	/* Set all pins to low power mode */

	for (uint8_t i = 0; i < 8; i++) {
 288:	8f 5f       	subi	r24, 0xFF	; 255
 28a:	88 30       	cpi	r24, 0x08	; 8
 28c:	b0 f3       	brcs	.-20     	; 0x27a <mcu_init+0x4>
 28e:	80 e0       	ldi	r24, 0x00	; 0
 290:	08 c0       	rjmp	.+16     	; 0x2a2 <mcu_init+0x2c>
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
 292:	e8 2f       	mov	r30, r24
 294:	f0 e0       	ldi	r31, 0x00	; 0
 296:	e0 5d       	subi	r30, 0xD0	; 208
 298:	fb 4f       	sbci	r31, 0xFB	; 251
 29a:	90 81       	ld	r25, Z
 29c:	98 60       	ori	r25, 0x08	; 8
 29e:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 2a0:	8f 5f       	subi	r24, 0xFF	; 255
 2a2:	88 30       	cpi	r24, 0x08	; 8
 2a4:	b0 f3       	brcs	.-20     	; 0x292 <mcu_init+0x1c>
 2a6:	80 e0       	ldi	r24, 0x00	; 0
 2a8:	08 c0       	rjmp	.+16     	; 0x2ba <mcu_init+0x44>
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
 2aa:	e8 2f       	mov	r30, r24
 2ac:	f0 e0       	ldi	r31, 0x00	; 0
 2ae:	e0 5b       	subi	r30, 0xB0	; 176
 2b0:	fb 4f       	sbci	r31, 0xFB	; 251
 2b2:	90 81       	ld	r25, Z
 2b4:	98 60       	ori	r25, 0x08	; 8
 2b6:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 2b8:	8f 5f       	subi	r24, 0xFF	; 255
 2ba:	88 30       	cpi	r24, 0x08	; 8
 2bc:	b0 f3       	brcs	.-20     	; 0x2aa <mcu_init+0x34>
 2be:	80 e0       	ldi	r24, 0x00	; 0
 2c0:	08 c0       	rjmp	.+16     	; 0x2d2 <mcu_init+0x5c>
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTD + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
 2c2:	e8 2f       	mov	r30, r24
 2c4:	f0 e0       	ldi	r31, 0x00	; 0
 2c6:	e0 59       	subi	r30, 0x90	; 144
 2c8:	fb 4f       	sbci	r31, 0xFB	; 251
 2ca:	90 81       	ld	r25, Z
 2cc:	98 60       	ori	r25, 0x08	; 8
 2ce:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 2d0:	8f 5f       	subi	r24, 0xFF	; 255
 2d2:	88 30       	cpi	r24, 0x08	; 8
 2d4:	b0 f3       	brcs	.-20     	; 0x2c2 <mcu_init+0x4c>
 2d6:	80 e0       	ldi	r24, 0x00	; 0
 2d8:	08 c0       	rjmp	.+16     	; 0x2ea <mcu_init+0x74>
		*((uint8_t *)&PORTD + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTE + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
 2da:	e8 2f       	mov	r30, r24
 2dc:	f0 e0       	ldi	r31, 0x00	; 0
 2de:	e0 57       	subi	r30, 0x70	; 112
 2e0:	fb 4f       	sbci	r31, 0xFB	; 251
 2e2:	90 81       	ld	r25, Z
 2e4:	98 60       	ori	r25, 0x08	; 8
 2e6:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTD + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 2e8:	8f 5f       	subi	r24, 0xFF	; 255
 2ea:	88 30       	cpi	r24, 0x08	; 8
 2ec:	b0 f3       	brcs	.-20     	; 0x2da <mcu_init+0x64>
 2ee:	80 e0       	ldi	r24, 0x00	; 0
 2f0:	08 c0       	rjmp	.+16     	; 0x302 <mcu_init+0x8c>
		*((uint8_t *)&PORTE + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTF + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
 2f2:	e8 2f       	mov	r30, r24
 2f4:	f0 e0       	ldi	r31, 0x00	; 0
 2f6:	e0 55       	subi	r30, 0x50	; 80
 2f8:	fb 4f       	sbci	r31, 0xFB	; 251
 2fa:	90 81       	ld	r25, Z
 2fc:	98 60       	ori	r25, 0x08	; 8
 2fe:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTE + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 300:	8f 5f       	subi	r24, 0xFF	; 255
 302:	88 30       	cpi	r24, 0x08	; 8
 304:	b0 f3       	brcs	.-20     	; 0x2f2 <mcu_init+0x7c>
		*((uint8_t *)&PORTF + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}
}
 306:	08 95       	ret

00000308 <OPERATIONAL_AMPLIFIER_0_initialization>:
 */
static inline void PORTD_pin_set_isc(const uint8_t pin, const PORT_ISC_t isc)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTD + 0x10 + pin);

	*port_pin_ctrl = (*port_pin_ctrl & ~PORT_ISC_gm) | isc;
 308:	e3 e7       	ldi	r30, 0x73	; 115
 30a:	f4 e0       	ldi	r31, 0x04	; 4
 30c:	80 81       	ld	r24, Z
 30e:	88 7f       	andi	r24, 0xF8	; 248
 310:	84 60       	ori	r24, 0x04	; 4
 312:	80 83       	st	Z, r24
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTD + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
 314:	80 81       	ld	r24, Z
 316:	87 7f       	andi	r24, 0xF7	; 247
 318:	80 83       	st	Z, r24
 */
static inline void PORTD_pin_set_isc(const uint8_t pin, const PORT_ISC_t isc)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTD + 0x10 + pin);

	*port_pin_ctrl = (*port_pin_ctrl & ~PORT_ISC_gm) | isc;
 31a:	e1 e7       	ldi	r30, 0x71	; 113
 31c:	f4 e0       	ldi	r31, 0x04	; 4
 31e:	80 81       	ld	r24, Z
 320:	88 7f       	andi	r24, 0xF8	; 248
 322:	84 60       	ori	r24, 0x04	; 4
 324:	80 83       	st	Z, r24
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTD + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
 326:	80 81       	ld	r24, Z
 328:	87 7f       	andi	r24, 0xF7	; 247
 32a:	80 83       	st	Z, r24
 */
static inline void PORTD_pin_set_isc(const uint8_t pin, const PORT_ISC_t isc)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTD + 0x10 + pin);

	*port_pin_ctrl = (*port_pin_ctrl & ~PORT_ISC_gm) | isc;
 32c:	e2 e7       	ldi	r30, 0x72	; 114
 32e:	f4 e0       	ldi	r31, 0x04	; 4
 330:	80 81       	ld	r24, Z
 332:	88 7f       	andi	r24, 0xF8	; 248
 334:	84 60       	ori	r24, 0x04	; 4
 336:	80 83       	st	Z, r24
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTD + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
 338:	80 81       	ld	r24, Z
 33a:	87 7f       	andi	r24, 0xF7	; 247
 33c:	80 83       	st	Z, r24
 */
static inline void PORTD_pin_set_isc(const uint8_t pin, const PORT_ISC_t isc)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTD + 0x10 + pin);

	*port_pin_ctrl = (*port_pin_ctrl & ~PORT_ISC_gm) | isc;
 33e:	e7 e7       	ldi	r30, 0x77	; 119
 340:	f4 e0       	ldi	r31, 0x04	; 4
 342:	80 81       	ld	r24, Z
 344:	88 7f       	andi	r24, 0xF8	; 248
 346:	84 60       	ori	r24, 0x04	; 4
 348:	80 83       	st	Z, r24
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTD + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
 34a:	80 81       	ld	r24, Z
 34c:	87 7f       	andi	r24, 0xF7	; 247
 34e:	80 83       	st	Z, r24
 */
static inline void PORTD_pin_set_isc(const uint8_t pin, const PORT_ISC_t isc)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTD + 0x10 + pin);

	*port_pin_ctrl = (*port_pin_ctrl & ~PORT_ISC_gm) | isc;
 350:	e5 e7       	ldi	r30, 0x75	; 117
 352:	f4 e0       	ldi	r31, 0x04	; 4
 354:	80 81       	ld	r24, Z
 356:	88 7f       	andi	r24, 0xF8	; 248
 358:	84 60       	ori	r24, 0x04	; 4
 35a:	80 83       	st	Z, r24
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTD + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
 35c:	80 81       	ld	r24, Z
 35e:	87 7f       	andi	r24, 0xF7	; 247
 360:	80 83       	st	Z, r24
 */
static inline void PORTE_pin_set_isc(const uint8_t pin, const PORT_ISC_t isc)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTE + 0x10 + pin);

	*port_pin_ctrl = (*port_pin_ctrl & ~PORT_ISC_gm) | isc;
 362:	e3 e9       	ldi	r30, 0x93	; 147
 364:	f4 e0       	ldi	r31, 0x04	; 4
 366:	80 81       	ld	r24, Z
 368:	88 7f       	andi	r24, 0xF8	; 248
 36a:	84 60       	ori	r24, 0x04	; 4
 36c:	80 83       	st	Z, r24
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTE + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
 36e:	80 81       	ld	r24, Z
 370:	87 7f       	andi	r24, 0xF7	; 247
 372:	80 83       	st	Z, r24
 */
static inline void PORTE_pin_set_isc(const uint8_t pin, const PORT_ISC_t isc)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTE + 0x10 + pin);

	*port_pin_ctrl = (*port_pin_ctrl & ~PORT_ISC_gm) | isc;
 374:	e1 e9       	ldi	r30, 0x91	; 145
 376:	f4 e0       	ldi	r31, 0x04	; 4
 378:	80 81       	ld	r24, Z
 37a:	88 7f       	andi	r24, 0xF8	; 248
 37c:	84 60       	ori	r24, 0x04	; 4
 37e:	80 83       	st	Z, r24
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTE + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
 380:	80 81       	ld	r24, Z
 382:	87 7f       	andi	r24, 0xF7	; 247
 384:	80 83       	st	Z, r24
 */
static inline void PORTE_pin_set_isc(const uint8_t pin, const PORT_ISC_t isc)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTE + 0x10 + pin);

	*port_pin_ctrl = (*port_pin_ctrl & ~PORT_ISC_gm) | isc;
 386:	e2 e9       	ldi	r30, 0x92	; 146
 388:	f4 e0       	ldi	r31, 0x04	; 4
 38a:	80 81       	ld	r24, Z
 38c:	88 7f       	andi	r24, 0xF8	; 248
 38e:	84 60       	ori	r24, 0x04	; 4
 390:	80 83       	st	Z, r24
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTE + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
 392:	80 81       	ld	r24, Z
 394:	87 7f       	andi	r24, 0xF7	; 247
 396:	80 83       	st	Z, r24
	// Disable digital input buffer
	PE2_set_isc(PORT_ISC_INPUT_DISABLE_gc);
	// Disable pull-up resistor
	PE2_set_pull_mode(PORT_PULL_OFF);

	OPERATIONAL_AMPLIFIER_0_init();
 398:	0e 94 17 02 	call	0x42e	; 0x42e <OPERATIONAL_AMPLIFIER_0_init>
 39c:	08 95       	ret

0000039e <EVENT_SYSTEM_0_initialization>:
}

void EVENT_SYSTEM_0_initialization(void)
{

	EVENT_SYSTEM_0_init();
 39e:	0e 94 0f 02 	call	0x41e	; 0x41e <EVENT_SYSTEM_0_init>
 3a2:	08 95       	ret

000003a4 <DAC_0_initialization>:
 */
static inline void PORTD_pin_set_isc(const uint8_t pin, const PORT_ISC_t isc)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTD + 0x10 + pin);

	*port_pin_ctrl = (*port_pin_ctrl & ~PORT_ISC_gm) | isc;
 3a4:	e6 e7       	ldi	r30, 0x76	; 118
 3a6:	f4 e0       	ldi	r31, 0x04	; 4
 3a8:	80 81       	ld	r24, Z
 3aa:	88 7f       	andi	r24, 0xF8	; 248
 3ac:	84 60       	ori	r24, 0x04	; 4
 3ae:	80 83       	st	Z, r24
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTD + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
 3b0:	80 81       	ld	r24, Z
 3b2:	87 7f       	andi	r24, 0xF7	; 247
 3b4:	80 83       	st	Z, r24
	// Disable digital input buffer
	DACOUT_set_isc(PORT_ISC_INPUT_DISABLE_gc);
	// Disable pull-up resistor
	DACOUT_set_pull_mode(PORT_PULL_OFF);

	DAC_0_init();
 3b6:	0e 94 2e 01 	call	0x25c	; 0x25c <DAC_0_init>
 3ba:	08 95       	ret

000003bc <ADC_0_initialization>:

/* Configure pins and initialize registers */
void ADC_0_initialization(void)
{

	ADC_0_init();
 3bc:	0e 94 07 01 	call	0x20e	; 0x20e <ADC_0_init>
 3c0:	08 95       	ret

000003c2 <TIMER_0_initialization>:
static inline void PORTE_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTE.OUT |= (1 << pin);
	} else {
		VPORTE.OUT &= ~(1 << pin);
 3c2:	81 b3       	in	r24, 0x11	; 17
 3c4:	8e 7f       	andi	r24, 0xFE	; 254
 3c6:	81 bb       	out	0x11, r24	; 17
	switch (dir) {
	case PORT_DIR_IN:
		VPORTE.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTE.DIR |= (1 << pin);
 3c8:	80 b3       	in	r24, 0x10	; 16
 3ca:	81 60       	ori	r24, 0x01	; 1
 3cc:	80 bb       	out	0x10, r24	; 16

	PE0_set_dir(PORT_DIR_OUT);

	/* set the alternate pin mux */

	PORTMUX.TCAROUTEA |= PORTMUX_TCA02_bm;
 3ce:	e0 ee       	ldi	r30, 0xE0	; 224
 3d0:	f5 e0       	ldi	r31, 0x05	; 5
 3d2:	86 81       	ldd	r24, Z+6	; 0x06
 3d4:	84 60       	ori	r24, 0x04	; 4
 3d6:	86 83       	std	Z+6, r24	; 0x06

	TIMER_0_init();
 3d8:	0e 94 43 02 	call	0x486	; 0x486 <TIMER_0_init>
 3dc:	08 95       	ret

000003de <TIMER_1_initialization>:
}

void TIMER_1_initialization(void)
{

	TIMER_1_init();
 3de:	0e 94 51 02 	call	0x4a2	; 0x4a2 <TIMER_1_init>
 3e2:	08 95       	ret

000003e4 <system_init>:
/**
 * \brief System initialization
 */
void system_init()
{
	mcu_init();
 3e4:	0e 94 3b 01 	call	0x276	; 0x276 <mcu_init>
static inline void PORTF_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTF.OUT |= (1 << pin);
	} else {
		VPORTF.OUT &= ~(1 << pin);
 3e8:	85 b3       	in	r24, 0x15	; 21
 3ea:	8f 7d       	andi	r24, 0xDF	; 223
 3ec:	85 bb       	out	0x15, r24	; 21
	switch (dir) {
	case PORT_DIR_IN:
		VPORTF.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTF.DIR |= (1 << pin);
 3ee:	84 b3       	in	r24, 0x14	; 20
 3f0:	80 62       	ori	r24, 0x20	; 32
 3f2:	84 bb       	out	0x14, r24	; 20
	PORTF_set_pin_level(5, false);


		PORTF_set_pin_dir(5, PORT_DIR_OUT);

	OPERATIONAL_AMPLIFIER_0_initialization();
 3f4:	0e 94 84 01 	call	0x308	; 0x308 <OPERATIONAL_AMPLIFIER_0_initialization>

	CLKCTRL_init();
 3f8:	0e 94 17 01 	call	0x22e	; 0x22e <CLKCTRL_init>

	EVENT_SYSTEM_0_initialization();
 3fc:	0e 94 cf 01 	call	0x39e	; 0x39e <EVENT_SYSTEM_0_initialization>

	SLPCTRL_init();
 400:	0e 94 41 02 	call	0x482	; 0x482 <SLPCTRL_init>

	CPUINT_init();
 404:	0e 94 25 01 	call	0x24a	; 0x24a <CPUINT_init>

	DAC_0_initialization();
 408:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <DAC_0_initialization>

	ADC_0_initialization();
 40c:	0e 94 de 01 	call	0x3bc	; 0x3bc <ADC_0_initialization>

	TIMER_0_initialization();
 410:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <TIMER_0_initialization>

	TIMER_1_initialization();
 414:	0e 94 ef 01 	call	0x3de	; 0x3de <TIMER_1_initialization>

	BOD_init();
 418:	0e 94 13 01 	call	0x226	; 0x226 <BOD_init>
 41c:	08 95       	ret

0000041e <EVENT_SYSTEM_0_init>:
 * \return Initialization status.
 */
int8_t EVENT_SYSTEM_0_init()
{

	EVSYS.CHANNEL0 = EVSYS_CHANNEL0_PORTB_PIN2_gc; /* Port B Pin 2 */
 41e:	8a e4       	ldi	r24, 0x4A	; 74
 420:	80 93 10 02 	sts	0x0210, r24	; 0x800210 <__TEXT_REGION_LENGTH__+0x7e0210>

	// EVSYS.USEROPAMP2ENABLE = EVSYS_USER_OFF_gc; /* Off */

	// EVSYS.USEROPAMP2DRIVE = EVSYS_USER_OFF_gc; /* Off */

	EVSYS.USEROPAMP2DUMP = EVSYS_USER_CHANNEL0_gc; /* Connect user to event channel 0 */
 424:	81 e0       	ldi	r24, 0x01	; 1
 426:	80 93 54 02 	sts	0x0254, r24	; 0x800254 <__TEXT_REGION_LENGTH__+0x7e0254>

	// EVSYS.USEROPAMP2DISABLE = EVSYS_USER_OFF_gc; /* Off */

	return 0;
}
 42a:	80 e0       	ldi	r24, 0x00	; 0
 42c:	08 95       	ret

0000042e <OPERATIONAL_AMPLIFIER_0_init>:
 * \return Initialization status.
 */
int8_t OPERATIONAL_AMPLIFIER_0_init()
{

	OPAMP.CTRLA = 1 << OPAMP_ENABLE_bp; /* OPAMP Peripheral Enable: enabled */
 42e:	e0 e0       	ldi	r30, 0x00	; 0
 430:	f7 e0       	ldi	r31, 0x07	; 7
 432:	81 e0       	ldi	r24, 0x01	; 1
 434:	80 83       	st	Z, r24

	// OPAMP.DBGCTRL = 0 << OPAMP_DBGRUN_bp; /* Run in Debug mode: disabled */

	OPAMP.TIMEBASE = OPAMP_TIMEBASE_VALUE << OPAMP_TIMEBASE_gp;
 436:	97 e1       	ldi	r25, 0x17	; 23
 438:	92 83       	std	Z+2, r25	; 0x02

	// OPAMP.PWRCTRL = OPAMP_PWRCTRL_IRSEL_FULL_gc; /* Full Input Range */

	OPAMP.OP0SETTLE = 0x1 << OPAMP_SETTLE_gp; /* Setting: 0x1 */
 43a:	84 8b       	std	Z+20, r24	; 0x14

	OPAMP.OP0CTRLA = 1 << OPAMP_ALWAYSON_bp             /* Always ON: enabled */
 43c:	95 e0       	ldi	r25, 0x05	; 5
 43e:	90 8b       	std	Z+16, r25	; 0x10
	                 | 0 << OPAMP_EVENTEN_bp            /* Event Enable: disabled */
	                 | OPAMP_OP0CTRLA_OUTMODE_NORMAL_gc /* Output Driver in Normal Mode */
	                 | 0 << OPAMP_RUNSTBY_bp;           /* Run is standby mode: disabled */

	OPAMP.OP0RESMUX = OPAMP_OP0RESMUX_MUXTOP_OUT_gc     /* OPn output */
 440:	29 ee       	ldi	r18, 0xE9	; 233
 442:	22 8b       	std	Z+18, r18	; 0x12
	                  | OPAMP_OP0RESMUX_MUXBOT_INN_gc   /* Negative input pin for OPn */
	                  | OPAMP_OP0RESMUX_MUXWIP_WIP7_gc; /* R1 = 1R, R2 = 15R, R2/R1 = 15 */

	OPAMP.OP0INMUX = OPAMP_OP0INMUX_MUXPOS_INP_gc /* VDD/2 */
 444:	20 e1       	ldi	r18, 0x10	; 16
 446:	23 8b       	std	Z+19, r18	; 0x13
	                 | OPAMP_OP0INMUX_MUXNEG_WIP_gc;  /* Wiper from OPn's resistor ladder */

	OPAMP.OP1SETTLE = 0x1 << OPAMP_SETTLE_gp; /* Setting: 0x1 */
 448:	84 8f       	std	Z+28, r24	; 0x1c

	OPAMP.OP1CTRLA = 1 << OPAMP_ALWAYSON_bp /* Always ON: disabled */
 44a:	90 8f       	std	Z+24, r25	; 0x18
			 | 0 << OPAMP_EVENTEN_bp /* Event Enable: disabled */
			 | OPAMP_OP1CTRLA_OUTMODE_NORMAL_gc /* Output Driver in Normal Mode */
			 | 0 << OPAMP_RUNSTBY_bp; /* Run is standby mode: disabled */

	OPAMP.OP1RESMUX = OPAMP_OP1RESMUX_MUXTOP_OFF_gc /* Multiplexer off */
 44c:	12 8e       	std	Z+26, r1	; 0x1a
			 | OPAMP_OP1RESMUX_MUXBOT_OFF_gc /* Multiplexer off */
			 | OPAMP_OP1RESMUX_MUXWIP_WIP0_gc; /* R1 = 15R, R2 = 1R, R2/R1 = 0.07 */

	OPAMP.OP1INMUX = OPAMP_OP1INMUX_MUXPOS_VDDDIV2_gc /* VDD/2 */
 44e:	94 e0       	ldi	r25, 0x04	; 4
 450:	93 8f       	std	Z+27, r25	; 0x1b
	                 | OPAMP_OP1INMUX_MUXNEG_INN_gc;  /* Negative input pin for OPn */

	OPAMP.OP2SETTLE = 0x1 << OPAMP_SETTLE_gp; /* Setting: 0x1 */
 452:	84 a3       	std	Z+36, r24	; 0x24

	OPAMP.OP2CTRLA = 1 << OPAMP_ALWAYSON_bp          /* Always ON: enabled */
 454:	87 e0       	ldi	r24, 0x07	; 7
 456:	80 a3       	std	Z+32, r24	; 0x20
	                 | 1 << OPAMP_EVENTEN_bp         /* Event Enable: enabled */
	                 | OPAMP_OP1CTRLA_OUTMODE_NORMAL_gc /* Output Driver Off */
	                 | 0 << OPAMP_RUNSTBY_bp;        /* Run is standby mode: disabled */

	OPAMP.OP2RESMUX = OPAMP_OP2RESMUX_MUXTOP_OFF_gc /* Multiplexer off */
 458:	12 a2       	std	Z+34, r1	; 0x22
			 | OPAMP_OP2RESMUX_MUXBOT_OFF_gc /* Multiplexer off */
			 | OPAMP_OP2RESMUX_MUXWIP_WIP0_gc; /* R1 = 15R, R2 = 1R, R2/R1 = 0.07 */

	OPAMP.OP2INMUX = OPAMP_OP2INMUX_MUXPOS_INP_gc /* Positive input pin for OPn */
 45a:	13 a2       	std	Z+35, r1	; 0x23
			 | OPAMP_OP2INMUX_MUXNEG_INN_gc; /* Negative input pin for OPn */

	return 0;
}
 45c:	80 e0       	ldi	r24, 0x00	; 0
 45e:	08 95       	ret

00000460 <OPERATIONAL_AMPLIFIER_0_EnableSystem>:

void OPERATIONAL_AMPLIFIER_0_EnableSystem()
{
	OPAMP.CTRLA |= OPAMP_ENABLE_bm;
 460:	e0 e0       	ldi	r30, 0x00	; 0
 462:	f7 e0       	ldi	r31, 0x07	; 7
 464:	80 81       	ld	r24, Z
 466:	81 60       	ori	r24, 0x01	; 1
 468:	80 83       	st	Z, r24
 46a:	08 95       	ret

0000046c <OPERATIONAL_AMPLIFIER_0_DisableSystem>:
}

void OPERATIONAL_AMPLIFIER_0_DisableSystem()
{
	OPAMP.CTRLA &= ~OPAMP_ENABLE_bm;
 46c:	e0 e0       	ldi	r30, 0x00	; 0
 46e:	f7 e0       	ldi	r31, 0x07	; 7
 470:	80 81       	ld	r24, Z
 472:	8e 7f       	andi	r24, 0xFE	; 254
 474:	80 83       	st	Z, r24
 476:	08 95       	ret

00000478 <protected_write_io>:
	PUBLIC_FUNCTION(protected_write_io)

#if defined(__GNUC__)
  
#ifdef RAMPZ
	out     _SFR_IO_ADDR(RAMPZ), r1         // Clear bits 23:16 of Z
 478:	1b be       	out	0x3b, r1	; 59
#endif
	movw    r30, r24                // Load addr into Z
 47a:	fc 01       	movw	r30, r24
	out     CCP, r22                // Start CCP handshake
 47c:	64 bf       	out	0x34, r22	; 52
	st      Z, r20                  // Write value to I/O register
 47e:	40 83       	st	Z, r20
	ret                             // Return to caller
 480:	08 95       	ret

00000482 <SLPCTRL_init>:

	// SLPCTRL.CTRLA = 0 << SLPCTRL_SEN_bp /* Sleep enable: disabled */
	//		 | SLPCTRL_SMODE_IDLE_gc; /* Idle mode */

	return 0;
}
 482:	80 e0       	ldi	r24, 0x00	; 0
 484:	08 95       	ret

00000486 <TIMER_0_init>:
 * \return Initialization status.
 */
int8_t TIMER_0_init()
{

	TCA0.SINGLE.CMP0 = 0x78; /* Compare Register 0: 0x78 */
 486:	e0 e0       	ldi	r30, 0x00	; 0
 488:	fa e0       	ldi	r31, 0x0A	; 10
 48a:	88 e7       	ldi	r24, 0x78	; 120
 48c:	90 e0       	ldi	r25, 0x00	; 0
 48e:	80 a7       	std	Z+40, r24	; 0x28
 490:	91 a7       	std	Z+41, r25	; 0x29

	// TCA0.SINGLE.CMP2 = 0x0; /* Compare Register 2: 0x0 */

	// TCA0.SINGLE.CNT = 0x0; /* Count: 0x0 */

	TCA0.SINGLE.CTRLB = 1 << TCA_SINGLE_ALUPD_bp    /* Auto Lock Update: enabled */
 492:	89 e1       	ldi	r24, 0x19	; 25
 494:	81 83       	std	Z+1, r24	; 0x01
	                    | 1 << TCA_SINGLE_CMP0EN_bp /* Compare 0 Enable: enabled */
	                    | 0 << TCA_SINGLE_CMP1EN_bp /* Compare 1 Enable: disabled */
	                    | 0 << TCA_SINGLE_CMP2EN_bp /* Compare 2 Enable: disabled */
	                    | TCA_SINGLE_WGMODE_FRQ_gc; /*  */

	TCA0.SINGLE.CTRLC = 1 << TCA_SINGLE_CMP0OV_bp    /* Compare 0 Waveform Output Value: enabled */
 496:	81 e0       	ldi	r24, 0x01	; 1
 498:	82 83       	std	Z+2, r24	; 0x02
	//		 | 0 << TCA_SINGLE_CMP2_bp /* Compare 2 Interrupt: disabled */
	//		 | 0 << TCA_SINGLE_OVF_bp; /* Overflow Interrupt: disabled */

	// TCA0.SINGLE.PER = 0xffff; /* Period: 0xffff */

	TCA0.SINGLE.CTRLA = TCA_SINGLE_CLKSEL_DIV1_gc      /* System Clock */
 49a:	81 e8       	ldi	r24, 0x81	; 129
 49c:	80 83       	st	Z, r24
	                    | 1 << TCA_SINGLE_ENABLE_bp    /* Module Enable: enabled */
	                    | 1 << TCA_SINGLE_RUNSTDBY_bp; /* RUN STANDBY: enabled */

	return 0;
}
 49e:	80 e0       	ldi	r24, 0x00	; 0
 4a0:	08 95       	ret

000004a2 <TIMER_1_init>:
 * \return Initialization status.
 */
int8_t TIMER_1_init()
{

	TCA1.SINGLE.CMP0 = 0x78; /* Compare Register 0: 0x78 */
 4a2:	e0 e4       	ldi	r30, 0x40	; 64
 4a4:	fa e0       	ldi	r31, 0x0A	; 10
 4a6:	88 e7       	ldi	r24, 0x78	; 120
 4a8:	90 e0       	ldi	r25, 0x00	; 0
 4aa:	80 a7       	std	Z+40, r24	; 0x28
 4ac:	91 a7       	std	Z+41, r25	; 0x29

	// TCA1.SINGLE.CMP2 = 0x0; /* Compare Register 2: 0x0 */

	// TCA1.SINGLE.CNT = 0x0; /* Count: 0x0 */

	TCA1.SINGLE.CTRLB = 0 << TCA_SINGLE_ALUPD_bp    /* Auto Lock Update: disabled */
 4ae:	81 e1       	ldi	r24, 0x11	; 17
 4b0:	81 83       	std	Z+1, r24	; 0x01
	//		 | 0 << TCA_SINGLE_CNTBEI_bp /* Count on Event Input B: disabled */
	//		 | TCA_SINGLE_EVACTA_CNT_POSEDGE_gc /* Count on positive edge event */
	//		 | TCA_SINGLE_EVACTB_UPDOWN_gc; /* Count on prescaled clock. Event controls count direction. Up-count when
	//event line is 0, down-count when event line is 1. */

	TCA1.SINGLE.INTCTRL = 1 << TCA_SINGLE_CMP0_bp   /* Compare 0 Interrupt: enabled */
 4b2:	80 e1       	ldi	r24, 0x10	; 16
 4b4:	82 87       	std	Z+10, r24	; 0x0a
	                      | 0 << TCA_SINGLE_CMP2_bp /* Compare 2 Interrupt: disabled */
	                      | 0 << TCA_SINGLE_OVF_bp; /* Overflow Interrupt: disabled */

	// TCA1.SINGLE.PER = 0xffff; /* Period: 0xffff */

	TCA1.SINGLE.CTRLA = TCA_SINGLE_CLKSEL_DIV1_gc      /* System Clock */
 4b6:	81 e0       	ldi	r24, 0x01	; 1
 4b8:	80 83       	st	Z, r24
	                    | 1 << TCA_SINGLE_ENABLE_bp    /* Module Enable: enabled */
	                    | 0 << TCA_SINGLE_RUNSTDBY_bp; /* RUN STANDBY: disabled */

	return 0;
}
 4ba:	80 e0       	ldi	r24, 0x00	; 0
 4bc:	08 95       	ret

000004be <_exit>:
 4be:	f8 94       	cli

000004c0 <__stop_program>:
 4c0:	ff cf       	rjmp	.-2      	; 0x4c0 <__stop_program>
