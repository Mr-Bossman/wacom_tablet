

tracesB =[
[(1.6, 1.8), (1.6, -1), (2.768062, -2.168062), (6.168062, -2.168062), (8.6, -4.6), (12, -4.6), (13, -5.6), (13, -7)],
[(1.2, 1.8), (1.2, -1.2), (2.6, -2.6), (6, -2.6), (8.4, -5), (11.8, -5), (12, -5.2), (12, -7)],
[(0.8, 1.8), (0.8, -1.4), (2.4, -3), (5.8, -3), (8.2, -5.4), (10.4, -5.4), (11, -6), (11, -7)],
[(0.4, 1.8), (0.4, -1.6), (2.2, -3.4), (5.6, -3.4), (8, -5.8), (9.6, -5.8), (10, -6.2), (10, -7)],
[(0, 1.8), (0, -1.8), (2, -3.8), (5.4, -3.8), (7.8, -6.2), (8.6, -6.2), (9, -6.6), (9, -7)],
[(-0.4, 1.8), (-0.4, -2), (1.8, -4.2), (5.2, -4.2), (8.2, -7.2), (8.2, -7.6), (8.4, -7.8), (13.2, -7.8), (14, -7)]
]

def offsetArr(line,offset):
	for i in range(len(line)):
			line[i] = (round(line[i][0] + offset[0],3), round(line[i][1] + offset[1],3))
	return line

for i in range(len(tracesB)):
		arr = offsetArr(tracesB[i],(-1.6+(i*0.4),-1.8))
		tracesB[i] = arr
		print(arr)
print(tracesB)
val = [((12,-5.2),(12,-7)),
((7.8,-6.2),(5.4,-3.8)),
((5.8,-3),(2.4,-3)),
((11,-7),(11,-6)),
((2.2,-3.4),(5.6,-3.4)),
((0.4,-1.6),(2.2,-3.4)),
((12,-4.6),(8.6,-4.6)),
((8.6,-4.6),(6.168062,-2.168062)),
((1.2,-1.2),(2.6,-2.6)),
((2.4,-3),(0.8,-1.4)),
((11.8,-5),(12,-5.2)),
((1.8,-4.2),(5.2,-4.2)),
((-0.4,-2),(1.8,-4.2)),
((13,-5.6),(12,-4.6)),
((5.2,-4.2),(8.2,-7.2)),
((2.6,-2.6),(6,-2.6)),
((0.8,-1.4),(0.8,1.8)),
((6.168062,-2.168062),(2.768062,-2.168062)),
((13.2,-7.8),(14,-7)),
((9,-6.6),(8.6,-6.2)),
((11,-6),(10.4,-5.4)),
((8.2,-7.6),(8.4,-7.8)),
((13,-7),(13,-5.6)),
((0,-1.8),(0,1.8)),
((6,-2.6),(8.4,-5)),
((9,-7),(9,-6.6)),
((5.6,-3.4),(8,-5.8)),
((10.4,-5.4),(8.2,-5.4)),
((9.6,-5.8),(10,-6.2)),
((0.4,-1.6),(0.4,1.8)),
((8.4,-7.8),(13.2,-7.8)),
((1.6,-1),(1.6,1.8)),
((2,-3.8),(0,-1.8)),
((5.4,-3.8),(2,-3.8)),
((8.6,-6.2),(7.8,-6.2)),
((8,-5.8),(9.6,-5.8)),
((8.2,-5.4),(5.8,-3)),
((2.768062,-2.168062),(1.6,-1)),
((1.2,1.8),(1.2,-1.2)),
((8.4,-5),(11.8,-5)),
((8.2,-7.2),(8.2,-7.6)),
((10,-6.2),(10,-7)),
((-0.4,1.8),(-0.4,-2))]
starts = dict()
start = []
for b in val:
	for i in b:
		if starts.get(i) :
			starts[i] += 1
		else:
			starts[i] = 1
for (key, vals) in starts.items():
	if vals == 1 and key[1] == 1.8:
		start.append(key)
for b in start:
	sorteds=[b]
	end = True
	while end:
		end = False
		for i in range(len(val)):
			if val[i][0] == sorteds[-1]:
				sorteds.append(val[i][1])
				val.pop(i)
				end = True
				break
			elif val[i][1] == sorteds[-1]:
				sorteds.append(val[i][0])
				val.pop(i)
				end = True
				break
	print(sorteds)